// ezchat v2.8 (c) nevadex 2022
// https://github.com/nevadex/ezchat/tree/v2.8
// do not edit this file if you do not know what you are doing

"use strict"; var init_start = performance.now(); console.log("[INIT] start"); var c_hubUrl = "/chatHub", c_fsUrl = "/fs", c_apiUrl = "/api", c_ver = "EZchat v2.8", c_dev = !1, c_defaultUsername = "user", isAdmin = !1, isBanned = !1, uuid = null, uid = null, api_status = null, fs_status = null, fs_pendingFiles = []; c_dev ? console.warn("[INIT] Running " + c_ver + "-dev! Expect errors or bugs.") : console.log("[INIT] Running " + c_ver); var connection = (new signalR.HubConnectionBuilder).configureLogging(signalR.LogLevel.None).withUrl(c_hubUrl).build(); async function asyncInit() { await connection.start().then(function () { if (null == uidCookie) { var e = connection.connectionId; document.cookie = "uid=" + e + "; expires=Thu, 18 Dec 2050 12:00:00 UTC", uidCookie = e } document.getElementById("sendButton").disabled = !1, document.getElementById("conState").textContent = "[Connected!]", connection.invoke("Login", userCookie, uidCookie).catch(function (e) { return connection.stop(), console.error(e.toString()) }), console.log("[INIT] logged in as [" + userCookie + "] with UID [" + uidCookie + "]"); var t = performance.now() - init_start; t = t.toFixed(1), console.log(`[INIT] done! took ${t} ms`), clearTimeout(overlayRefreshTimeout), $("#loadingOverlay").fadeOut() }).catch(function (e) { return console.error(e.toString()) }) } var userCookie, uidCookie, cookieString = document.cookie, cookies = cookieString.split("; "); function refreshConnectionState() { if (0 == isBanned) { var e = connection.state, t = document.getElementById("conState"); t.textContent = "[?]", "Connected" == e ? (t.textContent = "[Connected!]", t.style.color = "gray") : "Disconnected" == e ? (console.warn("[WS] disconnected! trying to reconnect"), t.textContent = "[Disconnected!]", t.style.color = "red", setTimeout(function () { connection.stop(), connection.start().then(function () { for (var e = document.getElementById("messagesList"); e.firstChild;)e.removeChild(e.firstChild); connection.invoke("Login", document.getElementById("userInput").value, uidCookie).then(function () { refreshConnectionState() }).catch(function (e) { return console.error(e.toString()) }) }), refreshConnectionState() }, 1500)) : (t.textContent = "[" + e + "!]", t.style.color = "red") } } cookies.forEach(function (e) { e.includes("user=") && (userCookie = e.replace("user=", "")), uidCookie = e.includes("uid=") ? e.replace("uid=", "") : null }), null != userCookie ? (document.getElementById("userInput").value = userCookie, document.getElementById("messageInput").focus()) : (userCookie = c_defaultUsername, document.getElementById("userInput").value = c_defaultUsername, document.getElementById("userInput").focus()), uuid = uidCookie + "/" + userCookie, uid = uidCookie, $(document).ready(function () { "true" == localStorage.getItem("ttsMode") ? document.getElementById("ttsMode").click() : document.getElementById("ttsMode").checked = !1, "true" == localStorage.getItem("filterMode") ? document.getElementById("filterMode").click() : document.getElementById("filterMode").checked = !1, "true" == localStorage.getItem("showUidsMode") ? document.getElementById("showUidsMode").click() : document.getElementById("showUidsMode").checked = !1, "true" == localStorage.getItem("darkMode") ? document.getElementById("darkMode").click() : document.getElementById("darkMode").checked = !1 }), console.log("[INIT] loaded local"), fetch(c_fsUrl + "/status").then(e => e.json()).then(e => { fs_status = JSON.parse(e) }).then(e => { 0 == fs_status.enabled && (document.getElementById("uploadFileManualTrigger").disabled = !0, document.getElementById("uploadFileManual").disabled = !0, document.getElementById("uploadFileManualTrigger").hidden = !0, document.getElementById("uploadFileManual").hidden = !0), console.log("[INIT] loaded FS_Status") }), fetch(c_apiUrl + "/status").then(e => e.json()).then(e => { api_status = JSON.parse(e) }).then(e => { UseAdminAttribute(), console.log("[INIT] loaded Api_Status") }), asyncInit(), document.getElementById("sendButton").disabled = !0, document.getElementById("messageInput").addEventListener("keyup", function (e) { e.preventDefault(), 13 === e.keyCode && document.getElementById("sendButton").click(e) }); let speech = new SpeechSynthesisUtterance; speech.lang = "en"; var voices = window.speechSynthesis.getVoices(); speech.voice = voices[4]; class MsgTextSel { constructor(e, t) { this.text = e, this.isLink = t } } function UseAdminAttribute() { var e = new URLSearchParams(window.location.search).get("admin"); api_status.useAdminAttribute && "true" == e && (isAdmin = !0, console.log("[CHAT] User has permission 'Admin'")) } connection.on("ReceiveMessage", function (e, t, n) { var i, d = document.createElement("li"); d.dataset.uid = n, d.dataset.user = e; let a = new RegExp("<window.location.href>", "img"); var o = e, s = (i = t.replaceAll(a, window.location.href), []), l = i.split(" "); i.includes(" ") || (l = []).push(i); for (let e = 0; e < l.length; e++) { var c = document.createElement("a"); if (c.href = l[e], c.host != document.location.host || l[e].includes(document.location.host)) { var r = c.href.split(":"); if ("http" != r[0] && "https" != r[0] || "/" != r[1].charAt(0) || "/" != r[1].charAt(1)) { s.push(new MsgTextSel(l[e], !1)); continue } s.push(new MsgTextSel(l[e], !0)) } else s.push(new MsgTextSel(l[e], !1)) } if (d.dataset.msgSections = JSON.stringify(s), 1 == document.getElementById("filterMode").checked) { o = pf_filter(o); for (let e = 0; e < s.length; e++)0 == s[e].isLink && (s[e].text = pf_filter(s[e].text)) } 1 == document.getElementById("showUidsMode").checked && (o = o.replace(d.dataset.user, d.dataset.uid + "/" + d.dataset.user)), 1 == document.getElementById("ttsMode").checked && (speech.text = e + " says " + i, window.speechSynthesis.speak(speech)), d.innerText = `<${o}> `; var u = document.createElement("div"), m = !1; for (let e = 0; e < s.length; e++)if (s[e].isLink) { var g = s[e].text; if ((g = getFileExtention(g)).includes("?") && (g = g.split("?")[0]), "/" == g.charAt(g.length - 1) && (g = g.substring(0, g.length - 1)), fs_status.displayImages && imageFormats.includes(g)) { m = !0; var f = document.createElement("img"); f.src = s[e].text, f.style.maxWidth = "50%", f.style.maxHeight = "50%", f.style.marginTop = "5px", f.style.marginBottom = "5px", f.style.marginRight = "5px", u.appendChild(f) } if (fs_status.displayImages && videoFormats.includes(g)) { m = !0; var p = document.createElement("video"); p.style.maxWidth = "30%", p.style.maxHeight = "30%", p.style.marginTop = "5px", p.style.marginBottom = "5px", p.style.marginRight = "5px", p.controls = "controls", p.preload = "metadata"; var h = document.createElement("source"); h.src = s[e].text; var v = document.createElement("p"); v.classList.add("text-warning"), v.innerHTML = "Unable to display video.", p.appendChild(h), p.appendChild(v), u.appendChild(p) } var y = document.createElement("a"); y.href = `${s[e].text}`, y.innerHTML = `${s[e].text}`, y.target = "_blank", d.appendChild(y), s.length - 1 > e && (d.innerHTML = d.innerHTML + " ") } else d.innerHTML = d.innerHTML + `${s[e].text} `; m && (d.appendChild(u), d.dataset.files = d.lastChild.innerHTML), document.getElementById("messagesList").appendChild(d) }), connection.on("ServerMsg", function (e, t, n) { if ("clientList" == e) { var i = t.split(" "), d = document.getElementById("clientList"), a = i[0] + " Online:", o = "Online UIDs:"; i.splice(0, 1), i.forEach(function (e, t) { var n = e.split("Â¶"), i = ""; i = n[0] == uidCookie ? " <i>" + n[1] + "</i>" : " " + n[1], a += i; var d = " " + n[0] + "/" + n[1]; o += d }), d.innerHTML = a, document.getElementById("admin-clientList").textContent = o } else "banMsg" == e ? (console.error("User was found on the banlist"), isBanned = !0, connection.stop(), connection = null, document.getElementById("conState").textContent = "[Disconnected!]", document.getElementById("conState").style.color = "red", document.getElementById("messageInput").value = "You are banned!", document.getElementById("messageInput").disabled = !0, document.getElementById("userInput").disabled = !0, document.getElementById("sendButton").disabled = !0) : "reload" == e && location.reload() }), document.getElementById("sendButton").addEventListener("click", async function (e) { e.preventDefault(), refreshConnectionState(); var t = document.getElementById("userInput").value, n = document.getElementById("messageInput").value, i = document.getElementById("userInput"), d = document.getElementById("messageInput"), a = document.getElementById("userInputFeedback"), o = document.getElementById("messageInputFeedback"); if ("" == t) return i.classList.add("is-invalid"), a.classList.add("invalid-feedback"), void (a.innerHTML = "Your username cannot be empty!"); if (i.classList.remove("is-invalid", "is-valid"), a.classList.remove("invalid-feedback", "valid-feedback"), a.innerHTML = "", d.classList.remove("is-invalid", "is-valid"), o.classList.remove("invalid-feedback", "valid-feedback"), o.innerHTML = "", "" == n && 0 == fs_pendingFiles.length) return d.classList.add("is-invalid"), o.classList.add("invalid-feedback"), void (o.innerHTML = "Your message cannot be empty!"); if (i.classList.remove("is-invalid", "is-valid"), a.classList.remove("invalid-feedback", "valid-feedback"), a.innerHTML = "", d.classList.remove("is-invalid", "is-valid"), o.classList.remove("invalid-feedback", "valid-feedback"), o.innerHTML = "", t.length > api_status.userCharLimit) return i.classList.add("is-invalid"), a.classList.add("invalid-feedback"), void (a.innerHTML = "Your username cannot be more than " + api_status.userCharLimit + " characters!"); if (i.classList.remove("is-invalid", "is-valid"), a.classList.remove("invalid-feedback", "valid-feedback"), a.innerHTML = "", d.classList.remove("is-invalid", "is-valid"), o.classList.remove("invalid-feedback", "valid-feedback"), o.innerHTML = "", n.length > api_status.messageCharLimit) return d.classList.add("is-invalid"), o.classList.add("invalid-feedback"), void (o.innerHTML = "Your message cannot be more than " + api_status.messageCharLimit + " characters!"); if (i.classList.remove("is-invalid", "is-valid"), a.classList.remove("invalid-feedback", "valid-feedback"), a.innerHTML = "", d.classList.remove("is-invalid", "is-valid"), o.classList.remove("invalid-feedback", "valid-feedback"), o.innerHTML = "", t.includes(" ")) return i.classList.add("is-invalid"), a.classList.add("invalid-feedback"), void (a.innerHTML = "Your username cannot contain a space!"); if (i.classList.remove("is-invalid", "is-valid"), a.classList.remove("invalid-feedback", "valid-feedback"), a.innerHTML = "", d.classList.remove("is-invalid", "is-valid"), o.classList.remove("invalid-feedback", "valid-feedback"), o.innerHTML = "", document.cookie = "user=" + t + "; expires=Thu, 18 Dec 2050 12:00:00 UTC", fs_pendingFiles.length > 0) for (let e = fs_pendingFiles.length - 1; e > -1; e--)await uploadFile(fs_pendingFiles[e].file, uid).then(n => { connection.invoke("SendMessage", t, "<window.location.href>" + n.url), document.getElementById("FC_" + fs_pendingFiles[e].fileName).remove(), fs_pendingFiles.splice(e, 1) }); else connection.invoke("SendMessage", t, n).catch(function (e) { return console.error(e.toString()) }); document.getElementById("messageInput").value = "", document.getElementById("messageInput").focus() }), document.getElementById("showUidsMode").addEventListener("click", function (e) { if (1 == document.getElementById("showUidsMode").checked) { var t = document.querySelectorAll("li"); for (let e = 0; e < t.length; e++) { var n = JSON.parse(t[e].dataset.msgSections), i = ""; if (1 == document.getElementById("filterMode").checked) { i = `<${t[e].dataset.uid}/${pf_filter(t[e].dataset.user)}> `; for (let e = 0; e < n.length; e++)0 == n[e].isLink && (n[e].text = pf_filter(n[e].text)) } else i = `<${t[e].dataset.uid}/${t[e].dataset.user}> `; t[e].innerHTML = "", t[e].innerText = i; for (let i = 0; i < n.length; i++) { if (n[i].isLink) (a = document.createElement("a")).href = `${n[i].text}`, a.innerHTML = `${n[i].text}`, a.target = "_blank", t[e].appendChild(a), n.length - 1 > i && (t[e].innerHTML = t[e].innerHTML + " "); else t[e].innerHTML = t[e].innerHTML + `${n[i].text} ` } if (null != t[e].dataset.files) (d = document.createElement("div")).innerHTML = t[e].dataset.files, t[e].appendChild(d) } } else { t = document.querySelectorAll("li"); for (let e = 0; e < t.length; e++) { var d; n = JSON.parse(t[e].dataset.msgSections), i = ""; if (1 == document.getElementById("filterMode").checked) { i = `<${pf_filter(t[e].dataset.user)}> `; for (let e = 0; e < n.length; e++)0 == n[e].isLink && (n[e].text = pf_filter(n[e].text)) } else i = `<${t[e].dataset.user}> `; t[e].innerHTML = "", t[e].innerText = i; for (let i = 0; i < n.length; i++) { var a; if (n[i].isLink) (a = document.createElement("a")).href = `${n[i].text}`, a.innerHTML = `${n[i].text}`, a.target = "_blank", t[e].appendChild(a), n.length - 1 > i && (t[e].innerHTML = t[e].innerHTML + " "); else t[e].innerHTML = t[e].innerHTML + `${n[i].text} ` } if (null != t[e].dataset.files) (d = document.createElement("div")).innerHTML = t[e].dataset.files, t[e].appendChild(d) } } }), document.getElementById("clearMsgList").addEventListener("click", function (e) { for (var t = document.getElementById("messagesList"); t.firstChild;)t.removeChild(t.firstChild) }), document.getElementById("conState").addEventListener("click", function (e) { refreshConnectionState() }), document.getElementById("darkMode").addEventListener("click", function (e) { 1 == document.getElementById("darkMode").checked ? (document.getElementById("mainBody").classList.remove("bootstrap"), document.getElementById("mainBody").classList.add("bootstrap-dark")) : (document.getElementById("mainBody").classList.remove("bootstrap-dark"), document.getElementById("mainBody").classList.add("bootstrap")) }), document.getElementById("settingsModalCloseButton").addEventListener("click", function (e) { refreshConnectionState(), localStorage.setItem("ttsMode", document.getElementById("ttsMode").checked.toString()), localStorage.setItem("filterMode", document.getElementById("filterMode").checked.toString()), localStorage.setItem("showUidsMode", document.getElementById("showUidsMode").checked.toString()), 1 == isAdmin && localStorage.setItem("showAdminMode", document.getElementById("showAdminMode").checked.toString()), localStorage.setItem("darkMode", document.getElementById("darkMode").checked.toString()) }), document.getElementById("uploadFileManualTrigger").addEventListener("click", function (e) { document.getElementById("uploadFileManual").click() }), document.getElementById("admin-refreshBanlistButton").addEventListener("click", function (e) { refreshConnectionState(), connection.invoke("AdminMsg", "banlist", "", uid) }), document.getElementById("admin-banButton").addEventListener("click", function (e) { refreshConnectionState(); var t = document.getElementById("admin-banInput").value; (document.getElementById("admin-banInput").value = "") ? alert("Admin: missing UID") : (connection.invoke("AdminMsg", "ban", t, uid), document.getElementById("admin-banInput").value = "", connection.invoke("AdminMsg", "banlist", "", uid)) }), document.getElementById("admin-unbanButton").addEventListener("click", function (e) { refreshConnectionState(); var t = document.getElementById("admin-unbanInput").value; (document.getElementById("admin-unbanInput").value = "") ? alert("Admin: missing UID") : (connection.invoke("AdminMsg", "unban", t, uid), document.getElementById("admin-unbanInput").value = "", connection.invoke("AdminMsg", "banlist", "", uid)) }), document.getElementById("admin-reconButton").addEventListener("click", function (e) { alert("The reconnect button is currently disabled.") }), document.getElementById("admin-clearCache").addEventListener("click", function (e) { refreshConnectionState(), connection.invoke("AdminMsg", "clearCache", "", uid) }), document.getElementById("admin-resetFS").addEventListener("click", function (e) { refreshConnectionState(), connection.invoke("AdminMsg", "resetFS", "", uid) }), document.getElementById("admin-reloadConfig").addEventListener("click", function (e) { refreshConnectionState(), connection.invoke("AdminMsg", "reloadConfig", "", uid) }), document.getElementById("admin-refreshAllClients").addEventListener("click", function (e) { refreshConnectionState(), connection.invoke("AdminMsg", "refreshAllClients", "", uid) }), document.getElementById("admin-changeMotd").addEventListener("click", function (e) { refreshConnectionState(); let t = prompt("New MOTD:"); connection.invoke("AdminMsg", "changeMotd", t, uid) }), document.getElementById("admin-pauseChat").addEventListener("click", function (e) { refreshConnectionState(), connection.invoke("AdminMsg", "pauseChat", "", uid) }), document.getElementById("admin-stopChat").addEventListener("click", function (e) { refreshConnectionState(), confirm("Confirm stopping chat?\nThis is irreversible, and EZchat will have to be restarted from the host.") && connection.invoke("AdminMsg", "stopChat", "", uid) }), connection.on("AdminMsg", function (e, t, n) { "banlist" == e ? document.getElementById("admin-banList").textContent = "Banned UIDs: " + t : "clientAdmin" == e && (isAdmin = !0, console.log("[CHAT] User has permission 'Admin'"), 1 == isAdmin && ("true" == localStorage.getItem("showAdminMode") ? document.getElementById("showAdminMode").click() : document.getElementById("showAdminMode").checked = !1)) }), document.getElementById("showAdminMode").addEventListener("click", function (e) { 1 == document.getElementById("showAdminMode").checked ? (document.getElementById("adminPanel").hidden = !1, connection.invoke("AdminMsg", "banlist", "", uid)) : document.getElementById("adminPanel").hidden = !0 }), document.getElementById("toggleOptions").addEventListener("click", function (e) { refreshConnectionState(), 1 == isAdmin ? (document.getElementById("showAdminDiv").style.display = "initial", document.getElementById("showAdminDivBr").style.display = "initial") : (document.getElementById("showAdminDiv").style.display = "none", document.getElementById("showAdminDivBr").style.display = "none") }); var imageFormats = [".apng", ".avif", ".gif", ".jpg", ".jpeg", ".jfif", ".pjpeg", ".pjp", ".png", ".svg", ".webp"], videoFormats = [".ogg", ".mp4", ".webm"], spoilerSvgOn = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">\n  <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588zM5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z"/>\n  <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12-.708.708z"/>\n</svg>', spoilerSvgOff = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">\n  <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>\n  <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>\n</svg>'; function dragOverHandler(e) { 1 == fs_status.enabled && e.preventDefault() } function getFileExtention(e) { var t = e.split("."), n = t[t.length - 1]; return n == e ? "" : "." + n } function uploadFileHandler(e) { if (e.preventDefault(), 1 == fs_status.enabled) if (e.dataTransfer.items) { for (var t = 0; t < e.dataTransfer.items.length; t++)if ("file" === e.dataTransfer.items[t].kind) { var n = e.dataTransfer.items[t].getAsFile(); queueFileUpload(n, n.name) } } else for (t = 0; t < e.dataTransfer.files.length; t++)queueFileUpload(files[t], files[t].name) } async function uploadFile(e, t) { var n, i = new FormData; return i.append("file", e), await fetch(c_fsUrl + "/Upload", { method: "POST", body: i, headers: { uid: t } }).then(e => e.json()).then(e => JSON.parse(e)).then(e => { n = e }).catch(e => console.error(e)), Promise.resolve(n) } function queueFileUpload(e, t) { var n = document.getElementById("messageInputCardDeck"), i = document.getElementById("fileUploadFeedback"), d = fs_status.acceptedExts, a = fs_status.blockedExts, o = getFileExtention(t), s = !0, l = !1, c = !1; if (d.includes(o) && fs_status.filterExts ? l = !0 : fs_status.filterExts || (l = !0), a.includes(o) && (c = !0), e.size > 1e6 * fs_status.maxFileSizeMB && (s = !1), l && s && !c) { i.innerHTML = "", i.style.display = "none"; var r = new FSFileUpload(e, t); fs_pendingFiles.push(r); var u = document.createElement("div"); fs_pendingFiles.length.toString(); u.id = "FC_" + t, u.classList.add("card", "border-info"), u.style.marginTop = "1px"; var m = document.createElement("div"); m.classList.add("card-header"), m.innerHTML = t; var g = document.createElement("button"); g.type = "button", g.classList.add("close"), g.onclick = function () { fs_pendingFiles.splice(fs_pendingFiles.indexOf(r), 1), document.getElementById("FC_" + t).remove() }; var f = document.createElement("span"); f.innerHTML = "&times;", g.appendChild(f), m.appendChild(g); var p = document.createElement("div"); if (p.classList.add("card-body"), imageFormats.includes(o)) { var h = document.createElement("img"); h.src = URL.createObjectURL(e), h.style.maxHeight = "100%", h.style.maxWidth = "100%", p.appendChild(h) } else if (videoFormats.includes(o)) { var v = document.createElement("video"); v.style.maxHeight = "100%", v.style.maxWidth = "100%", v.controls = "controls", v.preload = "auto"; var y = document.createElement("source"); y.src = URL.createObjectURL(e), (E = document.createElement("p")).classList.add("text-warning"), E.innerHTML = "Unable to display video.", v.appendChild(y), v.appendChild(E), p.appendChild(v) } else { var E; (E = document.createElement("p")).classList.add("text-warning"), E.innerHTML = "Unable to display file.", p.appendChild(E) } u.appendChild(m), u.appendChild(p), n.appendChild(u) } else i.onclick = function () { document.getElementById("fileUploadFeedback").innerHTML = "", document.getElementById("fileUploadFeedback").style.display = "none" }, c ? i.innerHTML = "Files of type " + o + " are blocked. <u>Hide</u>" : !c && fs_status.filterExts ? i.innerHTML = "Files of type " + o + " are not accepted. <u>Hide</u>" : i.innerHTML = s ? c + "|" + l + "|" + s : "File too large! Limit: " + fs_status.maxFileSizeMB + ".0MB, Your file: " + (e.size / 1e6).toFixed(1).toString() + "MB <u>Hide</u>", i.style.display = "block" } document.getElementById("messageInput").addEventListener("paste", function (e) { if (e.clipboardData.files.length > 0) for (let n = 0; n < e.clipboardData.files.length; n++) { var t = e.clipboardData.files[n]; queueFileUpload(t, t.name) } }), document.getElementById("uploadFileManual").addEventListener("change", () => { for (var e = document.getElementById("uploadFileManual").files, t = 0; t < e.length; t++)queueFileUpload(e[t], e[t].name); document.getElementById("uploadFileManual").value = "" }); class FSFileUpload { constructor(e, t) { this.file = e, this.fileName = t } } var profanity_list = []; function pf_filter(e) { var t = e.toString(); for (let e = 0; e < profanity_list.length; e++) { var n = new RegExp(profanity_list[e], "img"), i = profanity_list[e].charAt(0); for (let t = 1; t < profanity_list[e].length; t++)" " != profanity_list[e].charAt(t) ? i += "*" : i += " "; t = t.replaceAll(n, i) } return t } fetch("https://raw.githubusercontent.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words/master/en").then(e => e.text()).then(e => { profanity_list = e.split("\n") }), document.getElementById("filterMode").addEventListener("click", function (e) { if (1 == document.getElementById("filterMode").checked) { var t = document.querySelectorAll("li"); for (let e = 0; e < t.length; e++) { var n = JSON.parse(t[e].dataset.msgSections), i = ""; i = 1 == document.getElementById("showUidsMode").checked ? `<${t[e].dataset.uid}/${pf_filter(t[e].dataset.user)}> ` : `<${pf_filter(t[e].dataset.user)}> `; for (let e = 0; e < n.length; e++)0 == n[e].isLink && (n[e].text = pf_filter(n[e].text)); t[e].innerHTML = "", t[e].innerText = i; for (let i = 0; i < n.length; i++) { if (n[i].isLink) (a = document.createElement("a")).href = `${n[i].text}`, a.innerHTML = `${n[i].text}`, a.target = "_blank", t[e].appendChild(a), n.length - 1 > i && (t[e].innerHTML = t[e].innerHTML + " "); else t[e].innerHTML = t[e].innerHTML + `${n[i].text} ` } if (null != t[e].dataset.files) (d = document.createElement("div")).innerHTML = t[e].dataset.files, t[e].appendChild(d) } } else { t = document.querySelectorAll("li"); for (let e = 0; e < t.length; e++) { var d; n = JSON.parse(t[e].dataset.msgSections), i = ""; i = 1 == document.getElementById("showUidsMode").checked ? `<${t[e].dataset.uid}/${t[e].dataset.user}> ` : `<${pf_filter(t[e].dataset.user)}> `, t[e].innerHTML = "", t[e].innerText = i; for (let i = 0; i < n.length; i++) { var a; if (n[i].isLink) (a = document.createElement("a")).href = `${n[i].text}`, a.innerHTML = `${n[i].text}`, a.target = "_blank", t[e].appendChild(a), n.length - 1 > i && (t[e].innerHTML = t[e].innerHTML + " "); else t[e].innerHTML = t[e].innerHTML + `${n[i].text} ` } if (null != t[e].dataset.files) (d = document.createElement("div")).innerHTML = t[e].dataset.files, t[e].appendChild(d) } } });